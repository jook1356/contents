name: "SEO Files Auto Update"

on:
  # 콘텐츠 변경시 자동 실행
  push:
    paths:
      - "contents/boards/**"
      - "contents/boards-config.json"
      - "contents/templates/**"

  # 매일 오전 2시 (UTC) / 오전 11시 (KST) 자동 실행
  schedule:
    - cron: "0 2 * * *"

  # 수동 실행 가능
  workflow_dispatch:
    inputs:
      force_update:
        description: "강제 업데이트 (모든 SEO 파일 재생성)"
        required: false
        default: "false"
        type: boolean

jobs:
  update-seo-files:
    name: "Update SEO Files"
    runs-on: ubuntu-latest

    steps:
      - name: "📥 Checkout repository"
        uses: actions/checkout@v4
        with:
          # 전체 커밋 히스토리를 가져와서 변경사항 감지 가능
          fetch-depth: 0

      - name: "🏗️ Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: "📊 Analyze content changes"
        id: changes
        run: |
          echo "🔍 콘텐츠 변경사항 분석 중..."

          # 변경된 파일 확인
          if [ "${{ github.event_name }}" = "push" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
            echo "변경된 파일들:"
            echo "$CHANGED_FILES"
            echo "changed_files<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            echo "scheduled=true" >> $GITHUB_OUTPUT
            echo "📅 정기 실행 - 모든 SEO 파일 업데이트"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "manual=true" >> $GITHUB_OUTPUT
            echo "🖱️ 수동 실행"
          fi

      - name: "🤖 Generate SEO files"
        run: |
          echo "🚀 SEO 파일 생성 시작..."
          npm run seo:generate

      - name: "📋 Check for changes"
        id: git-changes
        run: |
          # Git 상태 확인
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if [ -n "$(git status --porcelain)" ]; then
            echo "📝 SEO 파일 변경사항 발견"
            echo "changes=true" >> $GITHUB_OUTPUT
            
            # 변경된 파일들 출력
            echo "변경된 파일들:"
            git status --porcelain
          else
            echo "✅ SEO 파일에 변경사항 없음"
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      - name: "📤 Commit and push SEO files"
        if: steps.git-changes.outputs.changes == 'true'
        run: |
          # SEO 파일들만 스테이징
          git add contents/sitemap.xml contents/robots.txt

          # 커밋 메시지 생성
          if [ "${{ github.event_name }}" = "push" ]; then
            COMMIT_MSG="🤖 Auto-update SEO files after content changes"
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            COMMIT_MSG="🤖 Scheduled SEO files update"
          else
            COMMIT_MSG="🤖 Manual SEO files update"
          fi

          # 커밋 및 푸시
          git commit -m "$COMMIT_MSG" \
            -m "Generated by GitHub Actions" \
            -m "" \
            -m "📊 Updated files:" \
            -m "- sitemap.xml" \
            -m "- robots.txt"

          git push

          echo "✅ SEO 파일 업데이트 완료!"

      - name: "📊 Summary"
        if: always()
        run: |
          echo "## 🎯 SEO 업데이트 결과" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.git-changes.outputs.changes }}" = "true" ]; then
            echo "✅ **성공**: SEO 파일이 업데이트되었습니다" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 업데이트된 파일" >> $GITHUB_STEP_SUMMARY
            echo "- \`contents/sitemap.xml\`" >> $GITHUB_STEP_SUMMARY 
            echo "- \`contents/robots.txt\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **정보**: 변경할 SEO 파일이 없습니다" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 실행 정보" >> $GITHUB_STEP_SUMMARY
          echo "- **트리거**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **실행 시간**: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- **브랜치**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

      - name: "🔍 Content analysis report"
        if: github.event_name == 'push'
        run: |
          echo "## 📈 콘텐츠 분석 리포트" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # 게시글 개수 분석
          TOTAL_POSTS=$(find contents/boards -name "meta.json" | wc -l)
          FRONTEND_POSTS=$(find contents/boards/frontend -name "meta.json" 2>/dev/null | wc -l || echo 0)
          BACKEND_POSTS=$(find contents/boards/backend -name "meta.json" 2>/dev/null | wc -l || echo 0)
          GENERAL_POSTS=$(find contents/boards/general -name "meta.json" 2>/dev/null | wc -l || echo 0)
          TUTORIAL_POSTS=$(find contents/boards/tutorial -name "meta.json" 2>/dev/null | wc -l || echo 0)

          echo "### 📊 게시글 통계" >> $GITHUB_STEP_SUMMARY
          echo "- **전체**: ${TOTAL_POSTS}개" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: ${FRONTEND_POSTS}개" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend**: ${BACKEND_POSTS}개" >> $GITHUB_STEP_SUMMARY
          echo "- **General**: ${GENERAL_POSTS}개" >> $GITHUB_STEP_SUMMARY
          echo "- **Tutorial**: ${TUTORIAL_POSTS}개" >> $GITHUB_STEP_SUMMARY
